// Code generated by thriftgo (0.3.10). DO NOT EDIT.

package xuetang

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type MediaFiles struct {
	Id          string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	CompanyId   int64  `thrift:"companyId,2,required" frugal:"2,required,i64" json:"companyId"`
	CompanyName string `thrift:"companyName,3,required" frugal:"3,required,string" json:"companyName"`
	Filename    string `thrift:"filename,4,required" frugal:"4,required,string" json:"filename"`
	FileType    string `thrift:"fileType,5,required" frugal:"5,required,string" json:"fileType"`
	Tags        string `thrift:"tags,6,required" frugal:"6,required,string" json:"tags"`
	Bucket      string `thrift:"bucket,7,required" frugal:"7,required,string" json:"bucket"`
	FilePath    string `thrift:"filePath,8,required" frugal:"8,required,string" json:"filePath"`
	FileId      string `thrift:"fileId,9,required" frugal:"9,required,string" json:"fileId"`
	Url         string `thrift:"url,10,required" frugal:"10,required,string" json:"url"`
	Username    string `thrift:"username,11,required" frugal:"11,required,string" json:"username"`
	CreateDate  string `thrift:"createDate,12,required" frugal:"12,required,string" json:"createDate"`
	ChangeDate  string `thrift:"changeDate,13,required" frugal:"13,required,string" json:"changeDate"`
	Status      string `thrift:"status,14,required" frugal:"14,required,string" json:"status"`
	Remark      string `thrift:"remark,15,required" frugal:"15,required,string" json:"remark"`
	AuditStatus string `thrift:"auditStatus,16,required" frugal:"16,required,string" json:"auditStatus"`
	AuditMind   string `thrift:"auditMind,17,required" frugal:"17,required,string" json:"auditMind"`
	FileSize    int64  `thrift:"fileSize,18,required" frugal:"18,required,i64" json:"fileSize"`
}

func NewMediaFiles() *MediaFiles {
	return &MediaFiles{}
}

func (p *MediaFiles) InitDefault() {
	*p = MediaFiles{}
}

func (p *MediaFiles) GetId() (v string) {
	return p.Id
}

func (p *MediaFiles) GetCompanyId() (v int64) {
	return p.CompanyId
}

func (p *MediaFiles) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *MediaFiles) GetFilename() (v string) {
	return p.Filename
}

func (p *MediaFiles) GetFileType() (v string) {
	return p.FileType
}

func (p *MediaFiles) GetTags() (v string) {
	return p.Tags
}

func (p *MediaFiles) GetBucket() (v string) {
	return p.Bucket
}

func (p *MediaFiles) GetFilePath() (v string) {
	return p.FilePath
}

func (p *MediaFiles) GetFileId() (v string) {
	return p.FileId
}

func (p *MediaFiles) GetUrl() (v string) {
	return p.Url
}

func (p *MediaFiles) GetUsername() (v string) {
	return p.Username
}

func (p *MediaFiles) GetCreateDate() (v string) {
	return p.CreateDate
}

func (p *MediaFiles) GetChangeDate() (v string) {
	return p.ChangeDate
}

func (p *MediaFiles) GetStatus() (v string) {
	return p.Status
}

func (p *MediaFiles) GetRemark() (v string) {
	return p.Remark
}

func (p *MediaFiles) GetAuditStatus() (v string) {
	return p.AuditStatus
}

func (p *MediaFiles) GetAuditMind() (v string) {
	return p.AuditMind
}

func (p *MediaFiles) GetFileSize() (v int64) {
	return p.FileSize
}
func (p *MediaFiles) SetId(val string) {
	p.Id = val
}
func (p *MediaFiles) SetCompanyId(val int64) {
	p.CompanyId = val
}
func (p *MediaFiles) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *MediaFiles) SetFilename(val string) {
	p.Filename = val
}
func (p *MediaFiles) SetFileType(val string) {
	p.FileType = val
}
func (p *MediaFiles) SetTags(val string) {
	p.Tags = val
}
func (p *MediaFiles) SetBucket(val string) {
	p.Bucket = val
}
func (p *MediaFiles) SetFilePath(val string) {
	p.FilePath = val
}
func (p *MediaFiles) SetFileId(val string) {
	p.FileId = val
}
func (p *MediaFiles) SetUrl(val string) {
	p.Url = val
}
func (p *MediaFiles) SetUsername(val string) {
	p.Username = val
}
func (p *MediaFiles) SetCreateDate(val string) {
	p.CreateDate = val
}
func (p *MediaFiles) SetChangeDate(val string) {
	p.ChangeDate = val
}
func (p *MediaFiles) SetStatus(val string) {
	p.Status = val
}
func (p *MediaFiles) SetRemark(val string) {
	p.Remark = val
}
func (p *MediaFiles) SetAuditStatus(val string) {
	p.AuditStatus = val
}
func (p *MediaFiles) SetAuditMind(val string) {
	p.AuditMind = val
}
func (p *MediaFiles) SetFileSize(val int64) {
	p.FileSize = val
}

var fieldIDToName_MediaFiles = map[int16]string{
	1:  "id",
	2:  "companyId",
	3:  "companyName",
	4:  "filename",
	5:  "fileType",
	6:  "tags",
	7:  "bucket",
	8:  "filePath",
	9:  "fileId",
	10: "url",
	11: "username",
	12: "createDate",
	13: "changeDate",
	14: "status",
	15: "remark",
	16: "auditStatus",
	17: "auditMind",
	18: "fileSize",
}

func (p *MediaFiles) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCompanyId bool = false
	var issetCompanyName bool = false
	var issetFilename bool = false
	var issetFileType bool = false
	var issetTags bool = false
	var issetBucket bool = false
	var issetFilePath bool = false
	var issetFileId bool = false
	var issetUrl bool = false
	var issetUsername bool = false
	var issetCreateDate bool = false
	var issetChangeDate bool = false
	var issetStatus bool = false
	var issetRemark bool = false
	var issetAuditStatus bool = false
	var issetAuditMind bool = false
	var issetFileSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilename = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetTags = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetBucket = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilePath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsername = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetChangeDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetRemark = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetAuditStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetAuditMind = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCompanyId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFilename {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetFileType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTags {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetBucket {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetFilePath {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetFileId {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetUrl {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetUsername {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetCreateDate {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetChangeDate {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetRemark {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetAuditStatus {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetAuditMind {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetFileSize {
		fieldId = 18
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaFiles[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MediaFiles[fieldId]))
}

func (p *MediaFiles) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}
func (p *MediaFiles) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CompanyId = v
	}
	return nil
}
func (p *MediaFiles) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CompanyName = v
	}
	return nil
}
func (p *MediaFiles) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filename = v
	}
	return nil
}
func (p *MediaFiles) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FileType = v
	}
	return nil
}
func (p *MediaFiles) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tags = v
	}
	return nil
}
func (p *MediaFiles) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Bucket = v
	}
	return nil
}
func (p *MediaFiles) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FilePath = v
	}
	return nil
}
func (p *MediaFiles) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FileId = v
	}
	return nil
}
func (p *MediaFiles) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}
func (p *MediaFiles) ReadField11(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}
func (p *MediaFiles) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateDate = v
	}
	return nil
}
func (p *MediaFiles) ReadField13(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChangeDate = v
	}
	return nil
}
func (p *MediaFiles) ReadField14(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *MediaFiles) ReadField15(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}
func (p *MediaFiles) ReadField16(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AuditStatus = v
	}
	return nil
}
func (p *MediaFiles) ReadField17(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AuditMind = v
	}
	return nil
}
func (p *MediaFiles) ReadField18(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FileSize = v
	}
	return nil
}

func (p *MediaFiles) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MediaFiles"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaFiles) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MediaFiles) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CompanyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MediaFiles) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MediaFiles) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filename", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filename); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MediaFiles) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileType", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MediaFiles) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tags", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tags); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MediaFiles) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bucket", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Bucket); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MediaFiles) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filePath", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FilePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MediaFiles) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileId", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MediaFiles) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MediaFiles) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MediaFiles) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createDate", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MediaFiles) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("changeDate", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChangeDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MediaFiles) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MediaFiles) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *MediaFiles) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("auditStatus", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AuditStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *MediaFiles) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("auditMind", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AuditMind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *MediaFiles) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileSize", thrift.I64, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FileSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *MediaFiles) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaFiles(%+v)", *p)

}

func (p *MediaFiles) DeepEqual(ano *MediaFiles) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompanyId) {
		return false
	}
	if !p.Field3DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filename) {
		return false
	}
	if !p.Field5DeepEqual(ano.FileType) {
		return false
	}
	if !p.Field6DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field7DeepEqual(ano.Bucket) {
		return false
	}
	if !p.Field8DeepEqual(ano.FilePath) {
		return false
	}
	if !p.Field9DeepEqual(ano.FileId) {
		return false
	}
	if !p.Field10DeepEqual(ano.Url) {
		return false
	}
	if !p.Field11DeepEqual(ano.Username) {
		return false
	}
	if !p.Field12DeepEqual(ano.CreateDate) {
		return false
	}
	if !p.Field13DeepEqual(ano.ChangeDate) {
		return false
	}
	if !p.Field14DeepEqual(ano.Status) {
		return false
	}
	if !p.Field15DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field16DeepEqual(ano.AuditStatus) {
		return false
	}
	if !p.Field17DeepEqual(ano.AuditMind) {
		return false
	}
	if !p.Field18DeepEqual(ano.FileSize) {
		return false
	}
	return true
}

func (p *MediaFiles) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field2DeepEqual(src int64) bool {

	if p.CompanyId != src {
		return false
	}
	return true
}
func (p *MediaFiles) Field3DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Filename, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field5DeepEqual(src string) bool {

	if strings.Compare(p.FileType, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Tags, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Bucket, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field8DeepEqual(src string) bool {

	if strings.Compare(p.FilePath, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field9DeepEqual(src string) bool {

	if strings.Compare(p.FileId, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field12DeepEqual(src string) bool {

	if strings.Compare(p.CreateDate, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field13DeepEqual(src string) bool {

	if strings.Compare(p.ChangeDate, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field14DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field15DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field16DeepEqual(src string) bool {

	if strings.Compare(p.AuditStatus, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field17DeepEqual(src string) bool {

	if strings.Compare(p.AuditMind, src) != 0 {
		return false
	}
	return true
}
func (p *MediaFiles) Field18DeepEqual(src int64) bool {

	if p.FileSize != src {
		return false
	}
	return true
}

type PageParams struct {
	PageNo   int64 `thrift:"pageNo,1,required" frugal:"1,required,i64" json:"pageNo"`
	PageSize int64 `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
}

func NewPageParams() *PageParams {
	return &PageParams{}
}

func (p *PageParams) InitDefault() {
	*p = PageParams{}
}

func (p *PageParams) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *PageParams) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *PageParams) SetPageNo(val int64) {
	p.PageNo = val
}
func (p *PageParams) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_PageParams = map[int16]string{
	1: "pageNo",
	2: "pageSize",
}

func (p *PageParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNo bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PageParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PageParams[fieldId]))
}

func (p *PageParams) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNo = v
	}
	return nil
}
func (p *PageParams) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *PageParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PageParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PageParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNo", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PageParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PageParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageParams(%+v)", *p)

}

func (p *PageParams) DeepEqual(ano *PageParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *PageParams) Field1DeepEqual(src int64) bool {

	if p.PageNo != src {
		return false
	}
	return true
}
func (p *PageParams) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type PageResult_ struct {
	Items    []*MediaFiles `thrift:"items,1,required" frugal:"1,required,list<MediaFiles>" json:"items"`
	Counts   int64         `thrift:"counts,2,required" frugal:"2,required,i64" json:"counts"`
	Page     int64         `thrift:"page,3,required" frugal:"3,required,i64" json:"page"`
	PageSize int64         `thrift:"pageSize,4,required" frugal:"4,required,i64" json:"pageSize"`
}

func NewPageResult_() *PageResult_ {
	return &PageResult_{}
}

func (p *PageResult_) InitDefault() {
	*p = PageResult_{}
}

func (p *PageResult_) GetItems() (v []*MediaFiles) {
	return p.Items
}

func (p *PageResult_) GetCounts() (v int64) {
	return p.Counts
}

func (p *PageResult_) GetPage() (v int64) {
	return p.Page
}

func (p *PageResult_) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *PageResult_) SetItems(val []*MediaFiles) {
	p.Items = val
}
func (p *PageResult_) SetCounts(val int64) {
	p.Counts = val
}
func (p *PageResult_) SetPage(val int64) {
	p.Page = val
}
func (p *PageResult_) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_PageResult_ = map[int16]string{
	1: "items",
	2: "counts",
	3: "page",
	4: "pageSize",
}

func (p *PageResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetCounts bool = false
	var issetPage bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCounts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCounts {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPage {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PageResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PageResult_[fieldId]))
}

func (p *PageResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*MediaFiles, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMediaFiles()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *PageResult_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Counts = v
	}
	return nil
}
func (p *PageResult_) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Page = v
	}
	return nil
}
func (p *PageResult_) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *PageResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PageResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PageResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PageResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("counts", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Counts); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PageResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PageResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PageResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageResult_(%+v)", *p)

}

func (p *PageResult_) DeepEqual(ano *PageResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Counts) {
		return false
	}
	if !p.Field3DeepEqual(ano.Page) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *PageResult_) Field1DeepEqual(src []*MediaFiles) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PageResult_) Field2DeepEqual(src int64) bool {

	if p.Counts != src {
		return false
	}
	return true
}
func (p *PageResult_) Field3DeepEqual(src int64) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *PageResult_) Field4DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type UploadFileParamsDto struct {
	Filename string `thrift:"filename,1,required" frugal:"1,required,string" json:"filename"`
	FileType string `thrift:"fileType,2,required" frugal:"2,required,string" json:"fileType"`
	FileSize int64  `thrift:"fileSize,3,required" frugal:"3,required,i64" json:"fileSize"`
	Tags     string `thrift:"tags,4,required" frugal:"4,required,string" json:"tags"`
	Username string `thrift:"username,5,required" frugal:"5,required,string" json:"username"`
	Remark   string `thrift:"remark,6,required" frugal:"6,required,string" json:"remark"`
}

func NewUploadFileParamsDto() *UploadFileParamsDto {
	return &UploadFileParamsDto{}
}

func (p *UploadFileParamsDto) InitDefault() {
	*p = UploadFileParamsDto{}
}

func (p *UploadFileParamsDto) GetFilename() (v string) {
	return p.Filename
}

func (p *UploadFileParamsDto) GetFileType() (v string) {
	return p.FileType
}

func (p *UploadFileParamsDto) GetFileSize() (v int64) {
	return p.FileSize
}

func (p *UploadFileParamsDto) GetTags() (v string) {
	return p.Tags
}

func (p *UploadFileParamsDto) GetUsername() (v string) {
	return p.Username
}

func (p *UploadFileParamsDto) GetRemark() (v string) {
	return p.Remark
}
func (p *UploadFileParamsDto) SetFilename(val string) {
	p.Filename = val
}
func (p *UploadFileParamsDto) SetFileType(val string) {
	p.FileType = val
}
func (p *UploadFileParamsDto) SetFileSize(val int64) {
	p.FileSize = val
}
func (p *UploadFileParamsDto) SetTags(val string) {
	p.Tags = val
}
func (p *UploadFileParamsDto) SetUsername(val string) {
	p.Username = val
}
func (p *UploadFileParamsDto) SetRemark(val string) {
	p.Remark = val
}

var fieldIDToName_UploadFileParamsDto = map[int16]string{
	1: "filename",
	2: "fileType",
	3: "fileSize",
	4: "tags",
	5: "username",
	6: "remark",
}

func (p *UploadFileParamsDto) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilename bool = false
	var issetFileType bool = false
	var issetFileSize bool = false
	var issetTags bool = false
	var issetUsername bool = false
	var issetRemark bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilename = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTags = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsername = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetRemark = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilename {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFileType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFileSize {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTags {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetUsername {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetRemark {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadFileParamsDto[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadFileParamsDto[fieldId]))
}

func (p *UploadFileParamsDto) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filename = v
	}
	return nil
}
func (p *UploadFileParamsDto) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FileType = v
	}
	return nil
}
func (p *UploadFileParamsDto) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FileSize = v
	}
	return nil
}
func (p *UploadFileParamsDto) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tags = v
	}
	return nil
}
func (p *UploadFileParamsDto) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}
func (p *UploadFileParamsDto) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *UploadFileParamsDto) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadFileParamsDto"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadFileParamsDto) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filename", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filename); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadFileParamsDto) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileType", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadFileParamsDto) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileSize", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FileSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UploadFileParamsDto) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tags", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tags); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UploadFileParamsDto) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UploadFileParamsDto) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UploadFileParamsDto) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileParamsDto(%+v)", *p)

}

func (p *UploadFileParamsDto) DeepEqual(ano *UploadFileParamsDto) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filename) {
		return false
	}
	if !p.Field2DeepEqual(ano.FileType) {
		return false
	}
	if !p.Field3DeepEqual(ano.FileSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field5DeepEqual(ano.Username) {
		return false
	}
	if !p.Field6DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *UploadFileParamsDto) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Filename, src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileParamsDto) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FileType, src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileParamsDto) Field3DeepEqual(src int64) bool {

	if p.FileSize != src {
		return false
	}
	return true
}
func (p *UploadFileParamsDto) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Tags, src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileParamsDto) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileParamsDto) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}

type RestResponse struct {
	Code    int64   `thrift:"code,1,required" frugal:"1,required,i64" json:"code"`
	Msg     string  `thrift:"msg,2,optional" frugal:"2,optional,string" json:"msg,omitempty"`
	Result_ *string `thrift:"result,3,optional" frugal:"3,optional,string" json:"result,omitempty"`
}

func NewRestResponse() *RestResponse {
	return &RestResponse{

		Code: 0,
		Msg:  "success",
	}
}

func (p *RestResponse) InitDefault() {
	*p = RestResponse{

		Code: 0,
		Msg:  "success",
	}
}

func (p *RestResponse) GetCode() (v int64) {
	return p.Code
}

var RestResponse_Msg_DEFAULT string = "success"

func (p *RestResponse) GetMsg() (v string) {
	if !p.IsSetMsg() {
		return RestResponse_Msg_DEFAULT
	}
	return p.Msg
}

var RestResponse_Result__DEFAULT string

func (p *RestResponse) GetResult_() (v string) {
	if !p.IsSetResult_() {
		return RestResponse_Result__DEFAULT
	}
	return *p.Result_
}
func (p *RestResponse) SetCode(val int64) {
	p.Code = val
}
func (p *RestResponse) SetMsg(val string) {
	p.Msg = val
}
func (p *RestResponse) SetResult_(val *string) {
	p.Result_ = val
}

var fieldIDToName_RestResponse = map[int16]string{
	1: "code",
	2: "msg",
	3: "result",
}

func (p *RestResponse) IsSetMsg() bool {
	return p.Msg != RestResponse_Msg_DEFAULT
}

func (p *RestResponse) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *RestResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RestResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RestResponse[fieldId]))
}

func (p *RestResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}
func (p *RestResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}
func (p *RestResponse) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Result_ = &v
	}
	return nil
}

func (p *RestResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RestResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RestResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RestResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RestResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err = oprot.WriteFieldBegin("result", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Result_); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RestResponse(%+v)", *p)

}

func (p *RestResponse) DeepEqual(ano *RestResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Result_) {
		return false
	}
	return true
}

func (p *RestResponse) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *RestResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *RestResponse) Field3DeepEqual(src *string) bool {

	if p.Result_ == src {
		return true
	} else if p.Result_ == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Result_, *src) != 0 {
		return false
	}
	return true
}

type UploadFileResultDto struct {
	MediaFiles *MediaFiles `thrift:"mediaFiles,1,required" frugal:"1,required,MediaFiles" json:"mediaFiles"`
}

func NewUploadFileResultDto() *UploadFileResultDto {
	return &UploadFileResultDto{}
}

func (p *UploadFileResultDto) InitDefault() {
	*p = UploadFileResultDto{}
}

var UploadFileResultDto_MediaFiles_DEFAULT *MediaFiles

func (p *UploadFileResultDto) GetMediaFiles() (v *MediaFiles) {
	if !p.IsSetMediaFiles() {
		return UploadFileResultDto_MediaFiles_DEFAULT
	}
	return p.MediaFiles
}
func (p *UploadFileResultDto) SetMediaFiles(val *MediaFiles) {
	p.MediaFiles = val
}

var fieldIDToName_UploadFileResultDto = map[int16]string{
	1: "mediaFiles",
}

func (p *UploadFileResultDto) IsSetMediaFiles() bool {
	return p.MediaFiles != nil
}

func (p *UploadFileResultDto) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMediaFiles bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMediaFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMediaFiles {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadFileResultDto[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadFileResultDto[fieldId]))
}

func (p *UploadFileResultDto) ReadField1(iprot thrift.TProtocol) error {
	p.MediaFiles = NewMediaFiles()
	if err := p.MediaFiles.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UploadFileResultDto) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadFileResultDto"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadFileResultDto) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mediaFiles", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MediaFiles.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadFileResultDto) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileResultDto(%+v)", *p)

}

func (p *UploadFileResultDto) DeepEqual(ano *UploadFileResultDto) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MediaFiles) {
		return false
	}
	return true
}

func (p *UploadFileResultDto) Field1DeepEqual(src *MediaFiles) bool {

	if !p.MediaFiles.DeepEqual(src) {
		return false
	}
	return true
}

type UploadProcessResult_ struct {
	Filepath string  `thrift:"filepath,1,required" frugal:"1,required,string" json:"filepath"`
	Process  float64 `thrift:"process,2,required" frugal:"2,required,double" json:"process"`
}

func NewUploadProcessResult_() *UploadProcessResult_ {
	return &UploadProcessResult_{}
}

func (p *UploadProcessResult_) InitDefault() {
	*p = UploadProcessResult_{}
}

func (p *UploadProcessResult_) GetFilepath() (v string) {
	return p.Filepath
}

func (p *UploadProcessResult_) GetProcess() (v float64) {
	return p.Process
}
func (p *UploadProcessResult_) SetFilepath(val string) {
	p.Filepath = val
}
func (p *UploadProcessResult_) SetProcess(val float64) {
	p.Process = val
}

var fieldIDToName_UploadProcessResult_ = map[int16]string{
	1: "filepath",
	2: "process",
}

func (p *UploadProcessResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetProcess bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetProcess = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetProcess {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadProcessResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadProcessResult_[fieldId]))
}

func (p *UploadProcessResult_) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}
func (p *UploadProcessResult_) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Process = v
	}
	return nil
}

func (p *UploadProcessResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadProcessResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadProcessResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadProcessResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("process", thrift.DOUBLE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Process); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadProcessResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadProcessResult_(%+v)", *p)

}

func (p *UploadProcessResult_) DeepEqual(ano *UploadProcessResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filepath) {
		return false
	}
	if !p.Field2DeepEqual(ano.Process) {
		return false
	}
	return true
}

func (p *UploadProcessResult_) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Filepath, src) != 0 {
		return false
	}
	return true
}
func (p *UploadProcessResult_) Field2DeepEqual(src float64) bool {

	if p.Process != src {
		return false
	}
	return true
}

type Media interface {
	QueryMediaFiles(ctx context.Context, req *PageParams) (r *PageResult_, err error)

	UploadMediaFiles(ctx context.Context, req *UploadFileParamsDto, filePath string) (r *UploadFileResultDto, err error)

	GetPlayUrlByMediaId(ctx context.Context, mediaId string) (r *RestResponse, err error)
}

type MediaClient struct {
	c thrift.TClient
}

func NewMediaClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MediaClient {
	return &MediaClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMediaClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MediaClient {
	return &MediaClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMediaClient(c thrift.TClient) *MediaClient {
	return &MediaClient{
		c: c,
	}
}

func (p *MediaClient) Client_() thrift.TClient {
	return p.c
}

func (p *MediaClient) QueryMediaFiles(ctx context.Context, req *PageParams) (r *PageResult_, err error) {
	var _args MediaQueryMediaFilesArgs
	_args.Req = req
	var _result MediaQueryMediaFilesResult
	if err = p.Client_().Call(ctx, "QueryMediaFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MediaClient) UploadMediaFiles(ctx context.Context, req *UploadFileParamsDto, filePath string) (r *UploadFileResultDto, err error) {
	var _args MediaUploadMediaFilesArgs
	_args.Req = req
	_args.FilePath = filePath
	var _result MediaUploadMediaFilesResult
	if err = p.Client_().Call(ctx, "UploadMediaFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MediaClient) GetPlayUrlByMediaId(ctx context.Context, mediaId string) (r *RestResponse, err error) {
	var _args MediaGetPlayUrlByMediaIdArgs
	_args.MediaId = mediaId
	var _result MediaGetPlayUrlByMediaIdResult
	if err = p.Client_().Call(ctx, "getPlayUrlByMediaId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BigFile interface {
	Checkfile(ctx context.Context, fileMd5 string) (r *RestResponse, err error)

	UploadBigFile(ctx context.Context, req *UploadFileParamsDto, filePath string) (r *UploadFileResultDto, err error)

	GetUploadProcess(ctx context.Context, filepath string, fileSize float64) (r *UploadProcessResult_, err error)
}

type BigFileClient struct {
	c thrift.TClient
}

func NewBigFileClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BigFileClient {
	return &BigFileClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBigFileClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BigFileClient {
	return &BigFileClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBigFileClient(c thrift.TClient) *BigFileClient {
	return &BigFileClient{
		c: c,
	}
}

func (p *BigFileClient) Client_() thrift.TClient {
	return p.c
}

func (p *BigFileClient) Checkfile(ctx context.Context, fileMd5 string) (r *RestResponse, err error) {
	var _args BigFileCheckfileArgs
	_args.FileMd5 = fileMd5
	var _result BigFileCheckfileResult
	if err = p.Client_().Call(ctx, "checkfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BigFileClient) UploadBigFile(ctx context.Context, req *UploadFileParamsDto, filePath string) (r *UploadFileResultDto, err error) {
	var _args BigFileUploadBigFileArgs
	_args.Req = req
	_args.FilePath = filePath
	var _result BigFileUploadBigFileResult
	if err = p.Client_().Call(ctx, "UploadBigFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BigFileClient) GetUploadProcess(ctx context.Context, filepath string, fileSize float64) (r *UploadProcessResult_, err error) {
	var _args BigFileGetUploadProcessArgs
	_args.Filepath = filepath
	_args.FileSize = fileSize
	var _result BigFileGetUploadProcessResult
	if err = p.Client_().Call(ctx, "GetUploadProcess", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MediaProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Media
}

func (p *MediaProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MediaProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MediaProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMediaProcessor(handler Media) *MediaProcessor {
	self := &MediaProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("QueryMediaFiles", &mediaProcessorQueryMediaFiles{handler: handler})
	self.AddToProcessorMap("UploadMediaFiles", &mediaProcessorUploadMediaFiles{handler: handler})
	self.AddToProcessorMap("getPlayUrlByMediaId", &mediaProcessorGetPlayUrlByMediaId{handler: handler})
	return self
}
func (p *MediaProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type mediaProcessorQueryMediaFiles struct {
	handler Media
}

func (p *mediaProcessorQueryMediaFiles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MediaQueryMediaFilesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryMediaFiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MediaQueryMediaFilesResult{}
	var retval *PageResult_
	if retval, err2 = p.handler.QueryMediaFiles(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryMediaFiles: "+err2.Error())
		oprot.WriteMessageBegin("QueryMediaFiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryMediaFiles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mediaProcessorUploadMediaFiles struct {
	handler Media
}

func (p *mediaProcessorUploadMediaFiles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MediaUploadMediaFilesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadMediaFiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MediaUploadMediaFilesResult{}
	var retval *UploadFileResultDto
	if retval, err2 = p.handler.UploadMediaFiles(ctx, args.Req, args.FilePath); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadMediaFiles: "+err2.Error())
		oprot.WriteMessageBegin("UploadMediaFiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UploadMediaFiles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mediaProcessorGetPlayUrlByMediaId struct {
	handler Media
}

func (p *mediaProcessorGetPlayUrlByMediaId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MediaGetPlayUrlByMediaIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPlayUrlByMediaId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MediaGetPlayUrlByMediaIdResult{}
	var retval *RestResponse
	if retval, err2 = p.handler.GetPlayUrlByMediaId(ctx, args.MediaId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPlayUrlByMediaId: "+err2.Error())
		oprot.WriteMessageBegin("getPlayUrlByMediaId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPlayUrlByMediaId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MediaQueryMediaFilesArgs struct {
	Req *PageParams `thrift:"req,1" frugal:"1,default,PageParams" json:"req"`
}

func NewMediaQueryMediaFilesArgs() *MediaQueryMediaFilesArgs {
	return &MediaQueryMediaFilesArgs{}
}

func (p *MediaQueryMediaFilesArgs) InitDefault() {
	*p = MediaQueryMediaFilesArgs{}
}

var MediaQueryMediaFilesArgs_Req_DEFAULT *PageParams

func (p *MediaQueryMediaFilesArgs) GetReq() (v *PageParams) {
	if !p.IsSetReq() {
		return MediaQueryMediaFilesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MediaQueryMediaFilesArgs) SetReq(val *PageParams) {
	p.Req = val
}

var fieldIDToName_MediaQueryMediaFilesArgs = map[int16]string{
	1: "req",
}

func (p *MediaQueryMediaFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MediaQueryMediaFilesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaQueryMediaFilesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MediaQueryMediaFilesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPageParams()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MediaQueryMediaFilesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryMediaFiles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaQueryMediaFilesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MediaQueryMediaFilesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaQueryMediaFilesArgs(%+v)", *p)

}

func (p *MediaQueryMediaFilesArgs) DeepEqual(ano *MediaQueryMediaFilesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MediaQueryMediaFilesArgs) Field1DeepEqual(src *PageParams) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MediaQueryMediaFilesResult struct {
	Success *PageResult_ `thrift:"success,0,optional" frugal:"0,optional,PageResult_" json:"success,omitempty"`
}

func NewMediaQueryMediaFilesResult() *MediaQueryMediaFilesResult {
	return &MediaQueryMediaFilesResult{}
}

func (p *MediaQueryMediaFilesResult) InitDefault() {
	*p = MediaQueryMediaFilesResult{}
}

var MediaQueryMediaFilesResult_Success_DEFAULT *PageResult_

func (p *MediaQueryMediaFilesResult) GetSuccess() (v *PageResult_) {
	if !p.IsSetSuccess() {
		return MediaQueryMediaFilesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MediaQueryMediaFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*PageResult_)
}

var fieldIDToName_MediaQueryMediaFilesResult = map[int16]string{
	0: "success",
}

func (p *MediaQueryMediaFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MediaQueryMediaFilesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaQueryMediaFilesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MediaQueryMediaFilesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPageResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MediaQueryMediaFilesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryMediaFiles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaQueryMediaFilesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MediaQueryMediaFilesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaQueryMediaFilesResult(%+v)", *p)

}

func (p *MediaQueryMediaFilesResult) DeepEqual(ano *MediaQueryMediaFilesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MediaQueryMediaFilesResult) Field0DeepEqual(src *PageResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MediaUploadMediaFilesArgs struct {
	Req      *UploadFileParamsDto `thrift:"req,1" frugal:"1,default,UploadFileParamsDto" json:"req"`
	FilePath string               `thrift:"filePath,2" frugal:"2,default,string" json:"filePath"`
}

func NewMediaUploadMediaFilesArgs() *MediaUploadMediaFilesArgs {
	return &MediaUploadMediaFilesArgs{}
}

func (p *MediaUploadMediaFilesArgs) InitDefault() {
	*p = MediaUploadMediaFilesArgs{}
}

var MediaUploadMediaFilesArgs_Req_DEFAULT *UploadFileParamsDto

func (p *MediaUploadMediaFilesArgs) GetReq() (v *UploadFileParamsDto) {
	if !p.IsSetReq() {
		return MediaUploadMediaFilesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MediaUploadMediaFilesArgs) GetFilePath() (v string) {
	return p.FilePath
}
func (p *MediaUploadMediaFilesArgs) SetReq(val *UploadFileParamsDto) {
	p.Req = val
}
func (p *MediaUploadMediaFilesArgs) SetFilePath(val string) {
	p.FilePath = val
}

var fieldIDToName_MediaUploadMediaFilesArgs = map[int16]string{
	1: "req",
	2: "filePath",
}

func (p *MediaUploadMediaFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MediaUploadMediaFilesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaUploadMediaFilesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MediaUploadMediaFilesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUploadFileParamsDto()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *MediaUploadMediaFilesArgs) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FilePath = v
	}
	return nil
}

func (p *MediaUploadMediaFilesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadMediaFiles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaUploadMediaFilesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MediaUploadMediaFilesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filePath", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FilePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MediaUploadMediaFilesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaUploadMediaFilesArgs(%+v)", *p)

}

func (p *MediaUploadMediaFilesArgs) DeepEqual(ano *MediaUploadMediaFilesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	if !p.Field2DeepEqual(ano.FilePath) {
		return false
	}
	return true
}

func (p *MediaUploadMediaFilesArgs) Field1DeepEqual(src *UploadFileParamsDto) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}
func (p *MediaUploadMediaFilesArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FilePath, src) != 0 {
		return false
	}
	return true
}

type MediaUploadMediaFilesResult struct {
	Success *UploadFileResultDto `thrift:"success,0,optional" frugal:"0,optional,UploadFileResultDto" json:"success,omitempty"`
}

func NewMediaUploadMediaFilesResult() *MediaUploadMediaFilesResult {
	return &MediaUploadMediaFilesResult{}
}

func (p *MediaUploadMediaFilesResult) InitDefault() {
	*p = MediaUploadMediaFilesResult{}
}

var MediaUploadMediaFilesResult_Success_DEFAULT *UploadFileResultDto

func (p *MediaUploadMediaFilesResult) GetSuccess() (v *UploadFileResultDto) {
	if !p.IsSetSuccess() {
		return MediaUploadMediaFilesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MediaUploadMediaFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadFileResultDto)
}

var fieldIDToName_MediaUploadMediaFilesResult = map[int16]string{
	0: "success",
}

func (p *MediaUploadMediaFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MediaUploadMediaFilesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaUploadMediaFilesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MediaUploadMediaFilesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUploadFileResultDto()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MediaUploadMediaFilesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadMediaFiles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaUploadMediaFilesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MediaUploadMediaFilesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaUploadMediaFilesResult(%+v)", *p)

}

func (p *MediaUploadMediaFilesResult) DeepEqual(ano *MediaUploadMediaFilesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MediaUploadMediaFilesResult) Field0DeepEqual(src *UploadFileResultDto) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MediaGetPlayUrlByMediaIdArgs struct {
	MediaId string `thrift:"mediaId,1" frugal:"1,default,string" json:"mediaId"`
}

func NewMediaGetPlayUrlByMediaIdArgs() *MediaGetPlayUrlByMediaIdArgs {
	return &MediaGetPlayUrlByMediaIdArgs{}
}

func (p *MediaGetPlayUrlByMediaIdArgs) InitDefault() {
	*p = MediaGetPlayUrlByMediaIdArgs{}
}

func (p *MediaGetPlayUrlByMediaIdArgs) GetMediaId() (v string) {
	return p.MediaId
}
func (p *MediaGetPlayUrlByMediaIdArgs) SetMediaId(val string) {
	p.MediaId = val
}

var fieldIDToName_MediaGetPlayUrlByMediaIdArgs = map[int16]string{
	1: "mediaId",
}

func (p *MediaGetPlayUrlByMediaIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaGetPlayUrlByMediaIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MediaGetPlayUrlByMediaIdArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MediaId = v
	}
	return nil
}

func (p *MediaGetPlayUrlByMediaIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getPlayUrlByMediaId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaGetPlayUrlByMediaIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mediaId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MediaId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MediaGetPlayUrlByMediaIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaGetPlayUrlByMediaIdArgs(%+v)", *p)

}

func (p *MediaGetPlayUrlByMediaIdArgs) DeepEqual(ano *MediaGetPlayUrlByMediaIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MediaId) {
		return false
	}
	return true
}

func (p *MediaGetPlayUrlByMediaIdArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MediaId, src) != 0 {
		return false
	}
	return true
}

type MediaGetPlayUrlByMediaIdResult struct {
	Success *RestResponse `thrift:"success,0,optional" frugal:"0,optional,RestResponse" json:"success,omitempty"`
}

func NewMediaGetPlayUrlByMediaIdResult() *MediaGetPlayUrlByMediaIdResult {
	return &MediaGetPlayUrlByMediaIdResult{}
}

func (p *MediaGetPlayUrlByMediaIdResult) InitDefault() {
	*p = MediaGetPlayUrlByMediaIdResult{}
}

var MediaGetPlayUrlByMediaIdResult_Success_DEFAULT *RestResponse

func (p *MediaGetPlayUrlByMediaIdResult) GetSuccess() (v *RestResponse) {
	if !p.IsSetSuccess() {
		return MediaGetPlayUrlByMediaIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MediaGetPlayUrlByMediaIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*RestResponse)
}

var fieldIDToName_MediaGetPlayUrlByMediaIdResult = map[int16]string{
	0: "success",
}

func (p *MediaGetPlayUrlByMediaIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MediaGetPlayUrlByMediaIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MediaGetPlayUrlByMediaIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MediaGetPlayUrlByMediaIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRestResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MediaGetPlayUrlByMediaIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getPlayUrlByMediaId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MediaGetPlayUrlByMediaIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MediaGetPlayUrlByMediaIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaGetPlayUrlByMediaIdResult(%+v)", *p)

}

func (p *MediaGetPlayUrlByMediaIdResult) DeepEqual(ano *MediaGetPlayUrlByMediaIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MediaGetPlayUrlByMediaIdResult) Field0DeepEqual(src *RestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BigFileProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BigFile
}

func (p *BigFileProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BigFileProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BigFileProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBigFileProcessor(handler BigFile) *BigFileProcessor {
	self := &BigFileProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("checkfile", &bigFileProcessorCheckfile{handler: handler})
	self.AddToProcessorMap("UploadBigFile", &bigFileProcessorUploadBigFile{handler: handler})
	self.AddToProcessorMap("GetUploadProcess", &bigFileProcessorGetUploadProcess{handler: handler})
	return self
}
func (p *BigFileProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type bigFileProcessorCheckfile struct {
	handler BigFile
}

func (p *bigFileProcessorCheckfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BigFileCheckfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BigFileCheckfileResult{}
	var retval *RestResponse
	if retval, err2 = p.handler.Checkfile(ctx, args.FileMd5); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkfile: "+err2.Error())
		oprot.WriteMessageBegin("checkfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("checkfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bigFileProcessorUploadBigFile struct {
	handler BigFile
}

func (p *bigFileProcessorUploadBigFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BigFileUploadBigFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadBigFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BigFileUploadBigFileResult{}
	var retval *UploadFileResultDto
	if retval, err2 = p.handler.UploadBigFile(ctx, args.Req, args.FilePath); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadBigFile: "+err2.Error())
		oprot.WriteMessageBegin("UploadBigFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UploadBigFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bigFileProcessorGetUploadProcess struct {
	handler BigFile
}

func (p *bigFileProcessorGetUploadProcess) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BigFileGetUploadProcessArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUploadProcess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BigFileGetUploadProcessResult{}
	var retval *UploadProcessResult_
	if retval, err2 = p.handler.GetUploadProcess(ctx, args.Filepath, args.FileSize); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUploadProcess: "+err2.Error())
		oprot.WriteMessageBegin("GetUploadProcess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUploadProcess", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BigFileCheckfileArgs struct {
	FileMd5 string `thrift:"fileMd5,1" frugal:"1,default,string" json:"fileMd5"`
}

func NewBigFileCheckfileArgs() *BigFileCheckfileArgs {
	return &BigFileCheckfileArgs{}
}

func (p *BigFileCheckfileArgs) InitDefault() {
	*p = BigFileCheckfileArgs{}
}

func (p *BigFileCheckfileArgs) GetFileMd5() (v string) {
	return p.FileMd5
}
func (p *BigFileCheckfileArgs) SetFileMd5(val string) {
	p.FileMd5 = val
}

var fieldIDToName_BigFileCheckfileArgs = map[int16]string{
	1: "fileMd5",
}

func (p *BigFileCheckfileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BigFileCheckfileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BigFileCheckfileArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FileMd5 = v
	}
	return nil
}

func (p *BigFileCheckfileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("checkfile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BigFileCheckfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileMd5", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileMd5); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BigFileCheckfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFileCheckfileArgs(%+v)", *p)

}

func (p *BigFileCheckfileArgs) DeepEqual(ano *BigFileCheckfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileMd5) {
		return false
	}
	return true
}

func (p *BigFileCheckfileArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileMd5, src) != 0 {
		return false
	}
	return true
}

type BigFileCheckfileResult struct {
	Success *RestResponse `thrift:"success,0,optional" frugal:"0,optional,RestResponse" json:"success,omitempty"`
}

func NewBigFileCheckfileResult() *BigFileCheckfileResult {
	return &BigFileCheckfileResult{}
}

func (p *BigFileCheckfileResult) InitDefault() {
	*p = BigFileCheckfileResult{}
}

var BigFileCheckfileResult_Success_DEFAULT *RestResponse

func (p *BigFileCheckfileResult) GetSuccess() (v *RestResponse) {
	if !p.IsSetSuccess() {
		return BigFileCheckfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BigFileCheckfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*RestResponse)
}

var fieldIDToName_BigFileCheckfileResult = map[int16]string{
	0: "success",
}

func (p *BigFileCheckfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BigFileCheckfileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BigFileCheckfileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BigFileCheckfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRestResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BigFileCheckfileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("checkfile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BigFileCheckfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BigFileCheckfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFileCheckfileResult(%+v)", *p)

}

func (p *BigFileCheckfileResult) DeepEqual(ano *BigFileCheckfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BigFileCheckfileResult) Field0DeepEqual(src *RestResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BigFileUploadBigFileArgs struct {
	Req      *UploadFileParamsDto `thrift:"req,1" frugal:"1,default,UploadFileParamsDto" json:"req"`
	FilePath string               `thrift:"filePath,2" frugal:"2,default,string" json:"filePath"`
}

func NewBigFileUploadBigFileArgs() *BigFileUploadBigFileArgs {
	return &BigFileUploadBigFileArgs{}
}

func (p *BigFileUploadBigFileArgs) InitDefault() {
	*p = BigFileUploadBigFileArgs{}
}

var BigFileUploadBigFileArgs_Req_DEFAULT *UploadFileParamsDto

func (p *BigFileUploadBigFileArgs) GetReq() (v *UploadFileParamsDto) {
	if !p.IsSetReq() {
		return BigFileUploadBigFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BigFileUploadBigFileArgs) GetFilePath() (v string) {
	return p.FilePath
}
func (p *BigFileUploadBigFileArgs) SetReq(val *UploadFileParamsDto) {
	p.Req = val
}
func (p *BigFileUploadBigFileArgs) SetFilePath(val string) {
	p.FilePath = val
}

var fieldIDToName_BigFileUploadBigFileArgs = map[int16]string{
	1: "req",
	2: "filePath",
}

func (p *BigFileUploadBigFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BigFileUploadBigFileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BigFileUploadBigFileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BigFileUploadBigFileArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUploadFileParamsDto()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *BigFileUploadBigFileArgs) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FilePath = v
	}
	return nil
}

func (p *BigFileUploadBigFileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadBigFile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BigFileUploadBigFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BigFileUploadBigFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filePath", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FilePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BigFileUploadBigFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFileUploadBigFileArgs(%+v)", *p)

}

func (p *BigFileUploadBigFileArgs) DeepEqual(ano *BigFileUploadBigFileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	if !p.Field2DeepEqual(ano.FilePath) {
		return false
	}
	return true
}

func (p *BigFileUploadBigFileArgs) Field1DeepEqual(src *UploadFileParamsDto) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BigFileUploadBigFileArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FilePath, src) != 0 {
		return false
	}
	return true
}

type BigFileUploadBigFileResult struct {
	Success *UploadFileResultDto `thrift:"success,0,optional" frugal:"0,optional,UploadFileResultDto" json:"success,omitempty"`
}

func NewBigFileUploadBigFileResult() *BigFileUploadBigFileResult {
	return &BigFileUploadBigFileResult{}
}

func (p *BigFileUploadBigFileResult) InitDefault() {
	*p = BigFileUploadBigFileResult{}
}

var BigFileUploadBigFileResult_Success_DEFAULT *UploadFileResultDto

func (p *BigFileUploadBigFileResult) GetSuccess() (v *UploadFileResultDto) {
	if !p.IsSetSuccess() {
		return BigFileUploadBigFileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BigFileUploadBigFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadFileResultDto)
}

var fieldIDToName_BigFileUploadBigFileResult = map[int16]string{
	0: "success",
}

func (p *BigFileUploadBigFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BigFileUploadBigFileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BigFileUploadBigFileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BigFileUploadBigFileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUploadFileResultDto()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BigFileUploadBigFileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadBigFile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BigFileUploadBigFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BigFileUploadBigFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFileUploadBigFileResult(%+v)", *p)

}

func (p *BigFileUploadBigFileResult) DeepEqual(ano *BigFileUploadBigFileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BigFileUploadBigFileResult) Field0DeepEqual(src *UploadFileResultDto) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BigFileGetUploadProcessArgs struct {
	Filepath string  `thrift:"filepath,1" frugal:"1,default,string" json:"filepath"`
	FileSize float64 `thrift:"fileSize,2" frugal:"2,default,double" json:"fileSize"`
}

func NewBigFileGetUploadProcessArgs() *BigFileGetUploadProcessArgs {
	return &BigFileGetUploadProcessArgs{}
}

func (p *BigFileGetUploadProcessArgs) InitDefault() {
	*p = BigFileGetUploadProcessArgs{}
}

func (p *BigFileGetUploadProcessArgs) GetFilepath() (v string) {
	return p.Filepath
}

func (p *BigFileGetUploadProcessArgs) GetFileSize() (v float64) {
	return p.FileSize
}
func (p *BigFileGetUploadProcessArgs) SetFilepath(val string) {
	p.Filepath = val
}
func (p *BigFileGetUploadProcessArgs) SetFileSize(val float64) {
	p.FileSize = val
}

var fieldIDToName_BigFileGetUploadProcessArgs = map[int16]string{
	1: "filepath",
	2: "fileSize",
}

func (p *BigFileGetUploadProcessArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BigFileGetUploadProcessArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BigFileGetUploadProcessArgs) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}
func (p *BigFileGetUploadProcessArgs) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.FileSize = v
	}
	return nil
}

func (p *BigFileGetUploadProcessArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUploadProcess_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BigFileGetUploadProcessArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BigFileGetUploadProcessArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileSize", thrift.DOUBLE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.FileSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BigFileGetUploadProcessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFileGetUploadProcessArgs(%+v)", *p)

}

func (p *BigFileGetUploadProcessArgs) DeepEqual(ano *BigFileGetUploadProcessArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filepath) {
		return false
	}
	if !p.Field2DeepEqual(ano.FileSize) {
		return false
	}
	return true
}

func (p *BigFileGetUploadProcessArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Filepath, src) != 0 {
		return false
	}
	return true
}
func (p *BigFileGetUploadProcessArgs) Field2DeepEqual(src float64) bool {

	if p.FileSize != src {
		return false
	}
	return true
}

type BigFileGetUploadProcessResult struct {
	Success *UploadProcessResult_ `thrift:"success,0,optional" frugal:"0,optional,UploadProcessResult_" json:"success,omitempty"`
}

func NewBigFileGetUploadProcessResult() *BigFileGetUploadProcessResult {
	return &BigFileGetUploadProcessResult{}
}

func (p *BigFileGetUploadProcessResult) InitDefault() {
	*p = BigFileGetUploadProcessResult{}
}

var BigFileGetUploadProcessResult_Success_DEFAULT *UploadProcessResult_

func (p *BigFileGetUploadProcessResult) GetSuccess() (v *UploadProcessResult_) {
	if !p.IsSetSuccess() {
		return BigFileGetUploadProcessResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BigFileGetUploadProcessResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadProcessResult_)
}

var fieldIDToName_BigFileGetUploadProcessResult = map[int16]string{
	0: "success",
}

func (p *BigFileGetUploadProcessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BigFileGetUploadProcessResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BigFileGetUploadProcessResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BigFileGetUploadProcessResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUploadProcessResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BigFileGetUploadProcessResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUploadProcess_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BigFileGetUploadProcessResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BigFileGetUploadProcessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFileGetUploadProcessResult(%+v)", *p)

}

func (p *BigFileGetUploadProcessResult) DeepEqual(ano *BigFileGetUploadProcessResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BigFileGetUploadProcessResult) Field0DeepEqual(src *UploadProcessResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
