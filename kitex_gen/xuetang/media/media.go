// Code generated by Kitex v0.9.1. DO NOT EDIT.

package media

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	xuetang "xuetang/kitex_gen/xuetang"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"QueryMediaFiles": kitex.NewMethodInfo(
		queryMediaFilesHandler,
		newMediaQueryMediaFilesArgs,
		newMediaQueryMediaFilesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadMediaFiles": kitex.NewMethodInfo(
		uploadMediaFilesHandler,
		newMediaUploadMediaFilesArgs,
		newMediaUploadMediaFilesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getPlayUrlByMediaId": kitex.NewMethodInfo(
		getPlayUrlByMediaIdHandler,
		newMediaGetPlayUrlByMediaIdArgs,
		newMediaGetPlayUrlByMediaIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	mediaServiceInfo                = NewServiceInfo()
	mediaServiceInfoForClient       = NewServiceInfoForClient()
	mediaServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return mediaServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return mediaServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return mediaServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Media"
	handlerType := (*xuetang.Media)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "xuetang",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func queryMediaFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*xuetang.MediaQueryMediaFilesArgs)
	realResult := result.(*xuetang.MediaQueryMediaFilesResult)
	success, err := handler.(xuetang.Media).QueryMediaFiles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMediaQueryMediaFilesArgs() interface{} {
	return xuetang.NewMediaQueryMediaFilesArgs()
}

func newMediaQueryMediaFilesResult() interface{} {
	return xuetang.NewMediaQueryMediaFilesResult()
}

func uploadMediaFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*xuetang.MediaUploadMediaFilesArgs)
	realResult := result.(*xuetang.MediaUploadMediaFilesResult)
	success, err := handler.(xuetang.Media).UploadMediaFiles(ctx, realArg.Req, realArg.FilePath)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMediaUploadMediaFilesArgs() interface{} {
	return xuetang.NewMediaUploadMediaFilesArgs()
}

func newMediaUploadMediaFilesResult() interface{} {
	return xuetang.NewMediaUploadMediaFilesResult()
}

func getPlayUrlByMediaIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*xuetang.MediaGetPlayUrlByMediaIdArgs)
	realResult := result.(*xuetang.MediaGetPlayUrlByMediaIdResult)
	success, err := handler.(xuetang.Media).GetPlayUrlByMediaId(ctx, realArg.MediaId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMediaGetPlayUrlByMediaIdArgs() interface{} {
	return xuetang.NewMediaGetPlayUrlByMediaIdArgs()
}

func newMediaGetPlayUrlByMediaIdResult() interface{} {
	return xuetang.NewMediaGetPlayUrlByMediaIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryMediaFiles(ctx context.Context, req *xuetang.PageParams) (r *xuetang.PageResult_, err error) {
	var _args xuetang.MediaQueryMediaFilesArgs
	_args.Req = req
	var _result xuetang.MediaQueryMediaFilesResult
	if err = p.c.Call(ctx, "QueryMediaFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadMediaFiles(ctx context.Context, req *xuetang.UploadFileParamsDto, filePath string) (r *xuetang.UploadFileResultDto, err error) {
	var _args xuetang.MediaUploadMediaFilesArgs
	_args.Req = req
	_args.FilePath = filePath
	var _result xuetang.MediaUploadMediaFilesResult
	if err = p.c.Call(ctx, "UploadMediaFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPlayUrlByMediaId(ctx context.Context, mediaId string) (r *xuetang.RestResponse, err error) {
	var _args xuetang.MediaGetPlayUrlByMediaIdArgs
	_args.MediaId = mediaId
	var _result xuetang.MediaGetPlayUrlByMediaIdResult
	if err = p.c.Call(ctx, "getPlayUrlByMediaId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
